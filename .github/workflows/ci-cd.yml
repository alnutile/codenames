name: CI-CD

on: [push]

# Thanks to https://github.com/shivammathur/setup-php/blob/master/examples/laravel-mysql.yml
jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: test
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ["8.0"]
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug #optional

      - name: Start mysql service
        run: sudo /etc/init.d/mysql start

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate

      - name: Clear Config
        run: php artisan config:clear

      # Setup Done now to test and lint the code

      # Run linting to make sure it is worthwhile before NPM
      - name: phpstan
        run: |
          ./vendor/bin/phpstan analyse

      # Again another lint before we do the js build
      - name: PHP Code Style (phpcs)
        uses: chindit/actions-phpcs@master
        with:
          cli: "--standard=PSR12"
          dir: app/

      # The tests take care of the migrations we just want the .env file in place
      - name: Migrations
        run: |
          sudo cp .env.github .env

      - name: Test with phpunit
        run: XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-text --coverage-clover clover.xml
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}

      - name: Do we pass the coverage amount
        run: vendor/bin/coverage-check clover.xml 60
